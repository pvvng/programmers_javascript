// 순서대로 누를 번호가 담긴 배열 numbers
const numbers = [1, 3, 4, 5, 8, 2, 1, 4, 5, 9, 5];
// 왼손잡이인지 오른손잡이인 지를 나타내는 문자열 hand
const hand = "right"
// 각 번호를 누른 엄지손가락이 왼손인 지 오른손인 지를 나타내는 연속된 문자열 형태로 return
// result = "LRLLLRLLRRL";

// 1 2 3
// 4 5 6
// 7 8 9
// * 0 #

// 이 전화 키패드에서 왼손과 오른손의 엄지손가락만을 이용해서 숫자만을 입력하려고 합니다.
// 맨 처음 왼손 엄지손가락은 * 키패드에 오른손 엄지손가락은 # 키패드 위치에서 시작하며, 
// 엄지손가락을 사용하는 규칙은 다음과 같습니다.

// 엄지손가락은 상하좌우 4가지 방향으로만 이동할 수 있으며 키패드 이동 한 칸은 거리로 1에 해당합니다.
// 왼쪽 열의 3개의 숫자 1, 4, 7을 입력할 때는 왼손 엄지손가락을 사용합니다.
// 오른쪽 열의 3개의 숫자 3, 6, 9를 입력할 때는 오른손 엄지손가락을 사용합니다.
// 가운데 열의 4개의 숫자 2, 5, 8, 0을 입력할 때는 두 엄지손가락의 현재 키패드의 위치에서 더 가까운 엄지손가락을 사용합니다.

// 만약 두 엄지손가락의 거리가 같다면, 오른손잡이는 오른손 엄지손가락, 왼손잡이는 왼손 엄지손가락을 사용합니다.

function solution(numbers, hand) {
    // number로 이동할때 availabe한 값을 배열에 담기
    var answer = '';

    let nowLeft = '*';
    let nowRight = '#';

    const LRArray = [];

    for([index, click] of numbers.entries()){
        if (click === 1 || click === 4 || click === 7){
            LRArray.push('L');
            nowLeft = click.toString();
        }else if (click === 3 || click === 6 || click === 9){
            LRArray.push('R');
            nowRight = click.toString();
        }else{
            /**
             * GPT 선생님의 한맏;
             * 
             * 김 : 선생님 2, 5, 8, 0 일때 거리를 어떻게 구할지 모르겠어요.
             * 지 : ㅇㅋ
             * 
             * 거리 계산 -> 거리 비교 -> 거리 동일 시 선택
             * 로직을 거치면 됨
             * 
             * 거리 계산은 다음을 통해 가능함
             * 
             * 현재 왼손 엄지손가락과 오른손 엄지손가락의 위치를 좌표로 나타내고, 
             * 목표 숫자의 위치를 좌표로 나타내세요.
             * 
             * 좌표를 사용하여 맨해튼 거리를 계산하세요.
             * 맨해튼 거리는 두 좌표 (x1, y1)와 (x2, y2) 간의 거리로, 
             * |x1 - x2| + |y1 - y2|로 구할 수 있습니다.
             * 
             * 아하! 좌표를 구해서 하면 되겠구나!
             */
        }
    }

    return answer;
}